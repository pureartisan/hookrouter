import React from 'react';
import { useInterceptor } from "./interceptor";
import { navigate } from "./router";
/**
 * This is a controlled version of the interceptor which cancels any navigation intent
 * and hands control over it to your calling component.
 *
 * `interceptedPath` is initially `null` and will be set to the target path upon navigation.
 * `confirmNavigation` is the callback to be called to stop the interception and navigate to the last path.
 * `resetPath` is a callback that resets `interceptedPath` back to `null`.
 *
 * @returns {Array} [interceptedPath, confirmNavigation, resetPath]
 */

export const useControlledInterceptor = () => {
  const [interceptedPath, setInterceptedPath] = React.useState(null);
  const interceptorFunction = React.useMemo(() => (currentPath, nextPath) => {
    setInterceptedPath(nextPath);
    return currentPath;
  }, [setInterceptedPath]);
  const stopInterception = useInterceptor(interceptorFunction);
  const confirmNavigation = React.useMemo(() => () => {
    stopInterception();
    navigate(interceptedPath);
  }, [stopInterception, interceptedPath]);
  const resetPath = React.useMemo(() => () => setInterceptedPath(null), [setInterceptedPath]);
  return [interceptedPath, confirmNavigation, resetPath, stopInterception];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb250cm9sbGVkSW50ZXJjZXB0b3IuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VJbnRlcmNlcHRvciIsIm5hdmlnYXRlIiwidXNlQ29udHJvbGxlZEludGVyY2VwdG9yIiwiaW50ZXJjZXB0ZWRQYXRoIiwic2V0SW50ZXJjZXB0ZWRQYXRoIiwidXNlU3RhdGUiLCJpbnRlcmNlcHRvckZ1bmN0aW9uIiwidXNlTWVtbyIsImN1cnJlbnRQYXRoIiwibmV4dFBhdGgiLCJzdG9wSW50ZXJjZXB0aW9uIiwiY29uZmlybU5hdmlnYXRpb24iLCJyZXNldFBhdGgiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFRQyxjQUFSLFFBQTZCLGVBQTdCO0FBQ0EsU0FBUUMsUUFBUixRQUF1QixVQUF2QjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE9BQU8sTUFBTUMsd0JBQXdCLEdBQUcsTUFBTTtBQUM3QyxRQUFNLENBQUNDLGVBQUQsRUFBa0JDLGtCQUFsQixJQUF3Q0wsS0FBSyxDQUFDTSxRQUFOLENBQWUsSUFBZixDQUE5QztBQUVBLFFBQU1DLG1CQUFtQixHQUFHUCxLQUFLLENBQUNRLE9BQU4sQ0FDM0IsTUFBTSxDQUFDQyxXQUFELEVBQWNDLFFBQWQsS0FBMkI7QUFDaENMLElBQUFBLGtCQUFrQixDQUFDSyxRQUFELENBQWxCO0FBQ0EsV0FBT0QsV0FBUDtBQUNBLEdBSjBCLEVBSzNCLENBQUNKLGtCQUFELENBTDJCLENBQTVCO0FBUUEsUUFBTU0sZ0JBQWdCLEdBQUdWLGNBQWMsQ0FBQ00sbUJBQUQsQ0FBdkM7QUFFQSxRQUFNSyxpQkFBaUIsR0FBR1osS0FBSyxDQUFDUSxPQUFOLENBQ3pCLE1BQU0sTUFBTTtBQUNYRyxJQUFBQSxnQkFBZ0I7QUFDaEJULElBQUFBLFFBQVEsQ0FBQ0UsZUFBRCxDQUFSO0FBQ0EsR0FKd0IsRUFLekIsQ0FBQ08sZ0JBQUQsRUFBbUJQLGVBQW5CLENBTHlCLENBQTFCO0FBUUEsUUFBTVMsU0FBUyxHQUFHYixLQUFLLENBQUNRLE9BQU4sQ0FDakIsTUFBTSxNQUFNSCxrQkFBa0IsQ0FBQyxJQUFELENBRGIsRUFFakIsQ0FBQ0Esa0JBQUQsQ0FGaUIsQ0FBbEI7QUFLQSxTQUFPLENBQUNELGVBQUQsRUFBa0JRLGlCQUFsQixFQUFxQ0MsU0FBckMsRUFBZ0RGLGdCQUFoRCxDQUFQO0FBQ0EsQ0EzQk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge3VzZUludGVyY2VwdG9yfSBmcm9tIFwiLi9pbnRlcmNlcHRvclwiO1xyXG5pbXBvcnQge25hdmlnYXRlfSBmcm9tIFwiLi9yb3V0ZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgY29udHJvbGxlZCB2ZXJzaW9uIG9mIHRoZSBpbnRlcmNlcHRvciB3aGljaCBjYW5jZWxzIGFueSBuYXZpZ2F0aW9uIGludGVudFxyXG4gKiBhbmQgaGFuZHMgY29udHJvbCBvdmVyIGl0IHRvIHlvdXIgY2FsbGluZyBjb21wb25lbnQuXHJcbiAqXHJcbiAqIGBpbnRlcmNlcHRlZFBhdGhgIGlzIGluaXRpYWxseSBgbnVsbGAgYW5kIHdpbGwgYmUgc2V0IHRvIHRoZSB0YXJnZXQgcGF0aCB1cG9uIG5hdmlnYXRpb24uXHJcbiAqIGBjb25maXJtTmF2aWdhdGlvbmAgaXMgdGhlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB0byBzdG9wIHRoZSBpbnRlcmNlcHRpb24gYW5kIG5hdmlnYXRlIHRvIHRoZSBsYXN0IHBhdGguXHJcbiAqIGByZXNldFBhdGhgIGlzIGEgY2FsbGJhY2sgdGhhdCByZXNldHMgYGludGVyY2VwdGVkUGF0aGAgYmFjayB0byBgbnVsbGAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gW2ludGVyY2VwdGVkUGF0aCwgY29uZmlybU5hdmlnYXRpb24sIHJlc2V0UGF0aF1cclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2VDb250cm9sbGVkSW50ZXJjZXB0b3IgPSAoKSA9PiB7XHJcblx0Y29uc3QgW2ludGVyY2VwdGVkUGF0aCwgc2V0SW50ZXJjZXB0ZWRQYXRoXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpO1xyXG5cclxuXHRjb25zdCBpbnRlcmNlcHRvckZ1bmN0aW9uID0gUmVhY3QudXNlTWVtbyhcclxuXHRcdCgpID0+IChjdXJyZW50UGF0aCwgbmV4dFBhdGgpID0+IHtcclxuXHRcdFx0c2V0SW50ZXJjZXB0ZWRQYXRoKG5leHRQYXRoKTtcclxuXHRcdFx0cmV0dXJuIGN1cnJlbnRQYXRoO1xyXG5cdFx0fSxcclxuXHRcdFtzZXRJbnRlcmNlcHRlZFBhdGhdXHJcblx0KTtcclxuXHJcblx0Y29uc3Qgc3RvcEludGVyY2VwdGlvbiA9IHVzZUludGVyY2VwdG9yKGludGVyY2VwdG9yRnVuY3Rpb24pO1xyXG5cclxuXHRjb25zdCBjb25maXJtTmF2aWdhdGlvbiA9IFJlYWN0LnVzZU1lbW8oXHJcblx0XHQoKSA9PiAoKSA9PiB7XHJcblx0XHRcdHN0b3BJbnRlcmNlcHRpb24oKTtcclxuXHRcdFx0bmF2aWdhdGUoaW50ZXJjZXB0ZWRQYXRoKTtcclxuXHRcdH0sXHJcblx0XHRbc3RvcEludGVyY2VwdGlvbiwgaW50ZXJjZXB0ZWRQYXRoXVxyXG5cdCk7XHJcblxyXG5cdGNvbnN0IHJlc2V0UGF0aCA9IFJlYWN0LnVzZU1lbW8oXHJcblx0XHQoKSA9PiAoKSA9PiBzZXRJbnRlcmNlcHRlZFBhdGgobnVsbCksXHJcblx0XHRbc2V0SW50ZXJjZXB0ZWRQYXRoXVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiBbaW50ZXJjZXB0ZWRQYXRoLCBjb25maXJtTmF2aWdhdGlvbiwgcmVzZXRQYXRoLCBzdG9wSW50ZXJjZXB0aW9uXTtcclxufTtcclxuIl19