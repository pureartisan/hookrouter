import React from 'react';
import isNode from './isNode';
const queryParamListeners = [];
let queryParamObject = {};
export const setQueryParams = (inObj, replace = false) => {
  if (!(inObj instanceof Object)) {
    throw new Error('Object required');
  }

  if (replace) {
    queryParamObject = inObj;
  } else {
    Object.assign(queryParamObject, inObj);
  }

  const now = Date.now();
  queryParamListeners.forEach(cb => cb(now));

  if (!isNode) {
    const qs = '?' + objectToQueryString(queryParamObject);

    if (qs === location.search) {
      return;
    }

    history.replaceState(null, null, location.pathname + (qs !== '?' ? qs : ''));
  }
};
export const getQueryParams = () => Object.assign({}, queryParamObject);
/**
 * This takes an URL query string and converts it into a javascript object.
 * @param {string} inStr
 * @return {object}
 */

const queryStringToObject = inStr => {
  const p = new URLSearchParams(inStr);
  let result = {};

  for (let param of p) {
    result[param[0]] = param[1];
  }

  return result;
};
/**
 * This takes a javascript object and turns it into a URL query string.
 * @param {object} inObj
 * @return {string}
 */


const objectToQueryString = inObj => {
  const qs = new URLSearchParams();
  Object.entries(inObj).forEach(([key, value]) => value !== undefined ? qs.append(key, value) : null);
  return qs.toString();
};

if (!isNode) {
  queryParamObject = queryStringToObject(location.search.substr(1));
}
/**
 * This hook returns the currently set query parameters as object and offers a setter function
 * to set a new query string.
 *
 * All components that are hooked to the query parameters will get updated if they change.
 * Query params can also be updated along with the path, by calling `navigate(url, queryParams)`.
 *
 * @returns {array} [queryParamObject, setQueryParams]
 */


export const useQueryParams = () => {
  const setUpdate = React.useState(0)[1];
  React.useEffect(() => {
    queryParamListeners.push(setUpdate);
    return () => {
      const index = queryParamListeners.indexOf(setUpdate);

      if (index === -1) {
        return;
      }

      queryParamListeners.splice(index, 1);
    };
  }, [setUpdate]);
  return [queryParamObject, setQueryParams];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9xdWVyeVBhcmFtcy5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsImlzTm9kZSIsInF1ZXJ5UGFyYW1MaXN0ZW5lcnMiLCJxdWVyeVBhcmFtT2JqZWN0Iiwic2V0UXVlcnlQYXJhbXMiLCJpbk9iaiIsInJlcGxhY2UiLCJPYmplY3QiLCJFcnJvciIsImFzc2lnbiIsIm5vdyIsIkRhdGUiLCJmb3JFYWNoIiwiY2IiLCJxcyIsIm9iamVjdFRvUXVlcnlTdHJpbmciLCJsb2NhdGlvbiIsInNlYXJjaCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwYXRobmFtZSIsImdldFF1ZXJ5UGFyYW1zIiwicXVlcnlTdHJpbmdUb09iamVjdCIsImluU3RyIiwicCIsIlVSTFNlYXJjaFBhcmFtcyIsInJlc3VsdCIsInBhcmFtIiwiZW50cmllcyIsImtleSIsInZhbHVlIiwidW5kZWZpbmVkIiwiYXBwZW5kIiwidG9TdHJpbmciLCJzdWJzdHIiLCJ1c2VRdWVyeVBhcmFtcyIsInNldFVwZGF0ZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicHVzaCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsVUFBbkI7QUFFQSxNQUFNQyxtQkFBbUIsR0FBRyxFQUE1QjtBQUNBLElBQUlDLGdCQUFnQixHQUFHLEVBQXZCO0FBRUEsT0FBTyxNQUFNQyxjQUFjLEdBQUcsQ0FBQ0MsS0FBRCxFQUFRQyxPQUFPLEdBQUcsS0FBbEIsS0FBNEI7QUFDekQsTUFBRyxFQUFFRCxLQUFLLFlBQVlFLE1BQW5CLENBQUgsRUFBOEI7QUFDN0IsVUFBTSxJQUFJQyxLQUFKLENBQVUsaUJBQVYsQ0FBTjtBQUNBOztBQUNELE1BQUdGLE9BQUgsRUFBVztBQUNWSCxJQUFBQSxnQkFBZ0IsR0FBR0UsS0FBbkI7QUFDQSxHQUZELE1BRU87QUFDTkUsSUFBQUEsTUFBTSxDQUFDRSxNQUFQ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XHJcbmltcG9ydCBpc05vZGUgZnJvbSAnLi9pc05vZGUnO1xyXG5cclxuY29uc3QgcXVlcnlQYXJhbUxpc3RlbmVycyA9IFtdO1xyXG5sZXQgcXVlcnlQYXJhbU9iamVjdCA9IHt9O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldFF1ZXJ5UGFyYW1zID0gKGluT2JqLCByZXBsYWNlID0gZmFsc2UpID0+IHtcclxuXHRpZighKGluT2JqIGluc3RhbmNlb2YgT2JqZWN0KSl7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ09iamVjdCByZXF1aXJlZCcpO1xyXG5cdH1cclxuXHRpZihyZXBsYWNlKXtcclxuXHRcdHF1ZXJ5UGFyYW1PYmplY3QgPSBpbk9iajtcclxuXHR9IGVsc2Uge1xyXG5cdFx0T2JqZWN0LmFzc2lnbihxdWVyeVBhcmFtT2JqZWN0LCBpbk9iaik7XHJcblx0fVxyXG5cdGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcblx0cXVlcnlQYXJhbUxpc3RlbmVycy5mb3JFYWNoKGNiID0+IGNiKG5vdykpO1xyXG5cdGlmICghaXNOb2RlKSB7XHJcblx0XHRjb25zdCBxcyA9ICc/JyArIG9iamVjdFRvUXVlcnlTdHJpbmcocXVlcnlQYXJhbU9iamVjdCk7XHJcblx0XHRpZihxcyA9PT0gbG9jYXRpb24uc2VhcmNoKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIGxvY2F0aW9uLnBhdGhuYW1lICsgKHFzICE9PSAnPycgPyBxcyA6ICcnKSk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFF1ZXJ5UGFyYW1zID0gKCkgPT4gT2JqZWN0LmFzc2lnbih7fSwgcXVlcnlQYXJhbU9iamVjdCk7XHJcblxyXG4vKipcclxuICogVGhpcyB0YWtlcyBhbiBVUkwgcXVlcnkgc3RyaW5nIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgamF2YXNjcmlwdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpblN0clxyXG4gKiBAcmV0dXJuIHtvYmplY3R9XHJcbiAqL1xyXG5jb25zdCBxdWVyeVN0cmluZ1RvT2JqZWN0ID0gKGluU3RyKSA9PiB7XHJcblx0Y29uc3QgcCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5TdHIpO1xyXG5cdGxldCByZXN1bHQgPSB7fTtcclxuXHRmb3IgKGxldCBwYXJhbSBvZiBwKSB7XHJcblx0XHRyZXN1bHRbcGFyYW1bMF1dID0gcGFyYW1bMV07XHJcblx0fVxyXG5cdHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG4vKipcclxuICogVGhpcyB0YWtlcyBhIGphdmFzY3JpcHQgb2JqZWN0IGFuZCB0dXJucyBpdCBpbnRvIGEgVVJMIHF1ZXJ5IHN0cmluZy5cclxuICogQHBhcmFtIHtvYmplY3R9IGluT2JqXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICovXHJcbmNvbnN0IG9iamVjdFRvUXVlcnlTdHJpbmcgPSAoaW5PYmopID0+IHtcclxuXHRjb25zdCBxcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcclxuXHRPYmplY3QuZW50cmllcyhpbk9iaikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gcXMuYXBwZW5kKGtleSwgdmFsdWUpIDogbnVsbCk7XHJcblx0cmV0dXJuIHFzLnRvU3RyaW5nKCk7XHJcbn07XHJcblxyXG5pZighaXNOb2RlKXtcclxuXHRxdWVyeVBhcmFtT2JqZWN0ID0gcXVlcnlTdHJpbmdUb09iamVjdChsb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgaG9vayByZXR1cm5zIHRoZSBjdXJyZW50bHkgc2V0IHF1ZXJ5IHBhcmFtZXRlcnMgYXMgb2JqZWN0IGFuZCBvZmZlcnMgYSBzZXR0ZXIgZnVuY3Rpb25cclxuICogdG8gc2V0IGEgbmV3IHF1ZXJ5IHN0cmluZy5cclxuICpcclxuICogQWxsIGNvbXBvbmVudHMgdGhhdCBhcmUgaG9va2VkIHRvIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIHdpbGwgZ2V0IHVwZGF0ZWQgaWYgdGhleSBjaGFuZ2UuXHJcbiAqIFF1ZXJ5IHBhcmFtcyBjYW4gYWxzbyBiZSB1cGRhdGVkIGFsb25nIHdpdGggdGhlIHBhdGgsIGJ5IGNhbGxpbmcgYG5hdmlnYXRlKHVybCwgcXVlcnlQYXJhbXMpYC5cclxuICpcclxuICogQHJldHVybnMge2FycmF5fSBbcXVlcnlQYXJhbU9iamVjdCwgc2V0UXVlcnlQYXJhbXNdXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlUXVlcnlQYXJhbXMgPSAoKSA9PiB7XHJcblx0Y29uc3Qgc2V0VXBkYXRlID0gUmVhY3QudXNlU3RhdGUoMClbMV07XHJcblxyXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRxdWVyeVBhcmFtTGlzdGVuZXJzLnB1c2goc2V0VXBkYXRlKTtcclxuXHJcblx0XHRyZXR1cm4gKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBpbmRleCA9IHF1ZXJ5UGFyYW1MaXN0ZW5lcnMuaW5kZXhPZihzZXRVcGRhdGUpO1xyXG5cdFx0XHRpZiAoaW5kZXggPT09IC0xKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHF1ZXJ5UGFyYW1MaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHRcdH07XHJcblx0fSwgW3NldFVwZGF0ZV0pO1xyXG5cclxuXHRyZXR1cm4gW3F1ZXJ5UGFyYW1PYmplY3QsIHNldFF1ZXJ5UGFyYW1zXTtcclxufTtcclxuIl19