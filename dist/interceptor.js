import React from 'react';
let incrementalId = 1;
const interceptors = [];
export const interceptRoute = (previousRoute, nextRoute) => {
  if (!interceptors.length) {
    return nextRoute;
  }

  return interceptors.reduceRight((nextRoute, interceptor) => nextRoute === previousRoute ? nextRoute : interceptor.handlerFunction(previousRoute, nextRoute), nextRoute);
};

const get = componentId => interceptors.find(obj => obj.componentId === componentId) || null;

const remove = componentId => {
  const index = interceptors.findIndex(obj => obj.componentId === componentId);

  if (index !== -1) {
    interceptors.splice(index, 1);
  }
};

export const useInterceptor = handlerFunction => {
  const [componentId] = React.useState(incrementalId++);
  let obj = get(componentId);

  if (!obj) {
    obj = {
      componentId,
      stop: () => remove(componentId),
      handlerFunction
    };
    interceptors.unshift(obj);
  }

  React.useEffect(() => () => obj.stop(), []);
  return obj.stop;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnRlcmNlcHRvci5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsImluY3JlbWVudGFsSWQiLCJpbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRSb3V0ZSIsInByZXZpb3VzUm91dGUiLCJuZXh0Um91dGUiLCJsZW5ndGgiLCJyZWR1Y2VSaWdodCIsImludGVyY2VwdG9yIiwiaGFuZGxlckZ1bmN0aW9uIiwiZ2V0IiwiY29tcG9uZW50SWQiLCJmaW5kIiwib2JqIiwicmVtb3ZlIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJzcGxpY2UiLCJ1c2VJbnRlcmNlcHRvciIsInVzZVN0YXRlIiwic3RvcCIsInVuc2hpZnQiLCJ1c2VFZmZlY3QiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFFQSxJQUFJQyxhQUFhLEdBQUcsQ0FBcEI7QUFFQSxNQUFNQyxZQUFZLEdBQUcsRUFBckI7QUFFQSxPQUFPLE1BQU1DLGNBQWMsR0FBRyxDQUFDQyxhQUFELEVBQWdCQyxTQUFoQixLQUE4QjtBQUMzRCxNQUFJLENBQUNILFlBQVksQ0FBQ0ksTUFBbEIsRUFBMEI7QUFDekIsV0FBT0QsU0FBUDtBQUNBOztBQUVELFNBQU9ILFlBQVksQ0FBQ0ssV0FBYixDQUNOLENBQUNGLFNBQUQsRUFBWUcsV0FBWixLQUE0QkgsU0FBUyxLQUFLRCxhQUFkLEdBQ3pCQyxTQUR5QixHQUV6QkcsV0FBVyxDQUFDQyxlQUFaLENBQTRCTCxhQUE1QixFQUEyQ0MsU0FBM0MsQ0FIRyxFQUlOQSxTQUpNLENBQVA7QUFNQSxDQVhNOztBQWFQLE1BQU1LLEdBQUcsR0FBSUMsV0FBRCxJQUFpQlQsWUFBWSxDQUFDVSxJQUFiLENBQWtCQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0YsV0FBSixLQUFvQkEsV0FBN0MsS0FBNkQsSUFBMUY7O0FBQ0EsTUFBTUcsTUFBTSxHQUFJSCxXQUFELElBQWlCO0FBQy9CLFFBQU1JLEtBQUssR0FBR2IsWUFBWSxDQUFDYyxTQUFiLENBQXVCSCxHQUFHLElBQUlBLEdBQUcsQ0FBQ0YsV0FBSixLQUFvQkEsV0FBbEQsQ0FBZDs7QUFDQSxNQUFJSSxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2pCYixJQUFBQSxZQUFZLENBQUNlLE1BQWIsQ0FBb0JGLEtBQXBCLEVBQTJCLENBQTNCO0FBQ0E7QUFDRCxDQUxEOztBQU9BLE9BQU8sTUFBTUcsY0FBYyxHQUFJVCxlQUFELElBQXFCO0FBQ2xELFFBQU0sQ0FBQ0UsV0FBRCxJQUFnQlgsS0FBSyxDQUFDbUIsUUFBTixDQUFlbEIsYUFBYSxFQUE1QixDQUF0QjtBQUVBLE1BQUlZLEdBQUcsR0FBR0gsR0FBRyxDQUFDQyxXQUFELENBQWI7O0FBRUEsTUFBSSxDQUFDRSxHQUFMLEVBQVU7QUFDVEEsSUFBQUEsR0FBRyxHQUFHO0FBQ0xGLE1BQUFBLFdBREs7QUFFTFMsTUFBQUEsSUFBSSxFQUFFLE1BQU1OLE1BQU0sQ0FBQ0gsV0FBRCxDQUZiO0FBR0xGLE1BQUFBO0FBSEssS0FBTjtBQU1BUCxJQUFBQSxZQUFZLENBQUNtQixPQUFiLENBQXFCUixHQUFyQjtBQUNBOztBQUVEYixFQUFBQSxLQUFLLENBQUNzQixTQUFOLENBQWdCLE1BQU0sTUFBTVQsR0FBRyxDQUFDTyxJQUFKLEVBQTVCLEVBQXdDLEVBQXhDO0FBRUEsU0FBT1AsR0FBRyxDQUFDTyxJQUFYO0FBQ0EsQ0FsQk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxubGV0IGluY3JlbWVudGFsSWQgPSAxO1xyXG5cclxuY29uc3QgaW50ZXJjZXB0b3JzID0gW107XHJcblxyXG5leHBvcnQgY29uc3QgaW50ZXJjZXB0Um91dGUgPSAocHJldmlvdXNSb3V0ZSwgbmV4dFJvdXRlKSA9PiB7XHJcblx0aWYgKCFpbnRlcmNlcHRvcnMubGVuZ3RoKSB7XHJcblx0XHRyZXR1cm4gbmV4dFJvdXRlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGludGVyY2VwdG9ycy5yZWR1Y2VSaWdodChcclxuXHRcdChuZXh0Um91dGUsIGludGVyY2VwdG9yKSA9PiBuZXh0Um91dGUgPT09IHByZXZpb3VzUm91dGVcclxuXHRcdFx0PyBuZXh0Um91dGVcclxuXHRcdFx0OiBpbnRlcmNlcHRvci5oYW5kbGVyRnVuY3Rpb24ocHJldmlvdXNSb3V0ZSwgbmV4dFJvdXRlKSxcclxuXHRcdG5leHRSb3V0ZVxyXG5cdCk7XHJcbn07XHJcblxyXG5jb25zdCBnZXQgPSAoY29tcG9uZW50SWQpID0+IGludGVyY2VwdG9ycy5maW5kKG9iaiA9PiBvYmouY29tcG9uZW50SWQgPT09IGNvbXBvbmVudElkKSB8fCBudWxsO1xyXG5jb25zdCByZW1vdmUgPSAoY29tcG9uZW50SWQpID0+IHtcclxuXHRjb25zdCBpbmRleCA9IGludGVyY2VwdG9ycy5maW5kSW5kZXgob2JqID0+IG9iai5jb21wb25lbnRJZCA9PT0gY29tcG9uZW50SWQpO1xyXG5cdGlmIChpbmRleCAhPT0gLTEpIHtcclxuXHRcdGludGVyY2VwdG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VJbnRlcmNlcHRvciA9IChoYW5kbGVyRnVuY3Rpb24pID0+IHtcclxuXHRjb25zdCBbY29tcG9uZW50SWRdID0gUmVhY3QudXNlU3RhdGUoaW5jcmVtZW50YWxJZCsrKTtcclxuXHJcblx0bGV0IG9iaiA9IGdldChjb21wb25lbnRJZCk7XHJcblxyXG5cdGlmICghb2JqKSB7XHJcblx0XHRvYmogPSB7XHJcblx0XHRcdGNvbXBvbmVudElkLFxyXG5cdFx0XHRzdG9wOiAoKSA9PiByZW1vdmUoY29tcG9uZW50SWQpLFxyXG5cdFx0XHRoYW5kbGVyRnVuY3Rpb25cclxuXHRcdH07XHJcblxyXG5cdFx0aW50ZXJjZXB0b3JzLnVuc2hpZnQob2JqKTtcclxuXHR9XHJcblxyXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiAoKSA9PiBvYmouc3RvcCgpLCBbXSk7XHJcblxyXG5cdHJldHVybiBvYmouc3RvcDtcclxufTtcclxuIl19